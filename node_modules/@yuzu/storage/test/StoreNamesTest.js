import StoreNames from "../lib/StoreNames";

var storesConfig = [
    { namespace: "storeA", someMetadata: "Metadata" },
    { namespace: "storeB", isLocalStorage: false },
    { namespace: "storeC", options: { isTheBest: true } },
    { namespace: "storeD", isLocalStorage: true },
    { namespace: "storeE", isNullStorage: true },
    { namespace: "storeF", isFileStorage: true }
];

describe("StoreNames", function () {
    beforeEach(() => {
        this.storeNames = new StoreNames(storesConfig);
    });

    it("should expose `primaryStorage`. `localStorage`, `nullStorage` and `fileStorage`", () => {
        this.storeNames.should.respondTo("primaryStorage");
        this.storeNames.should.respondTo("localStorage");
        this.storeNames.should.respondTo("nullStorage");
        this.storeNames.should.respondTo("fileStorage");
    });

    describe("Calling primaryStorage", () => {
        beforeEach(() => {
            this.primaryStores = this.storeNames.primaryStorage();
        });

        it("should return the non local stores", () => {
            this.primaryStores.length.should.eql(3);
            this.primaryStores[0].should.eql("storeA");
            this.primaryStores[1].should.eql("storeB");
            this.primaryStores[2].should.eql("storeC");
        });
    });

    describe("Calling localStorage", () => {
        beforeEach(() => {
            this.localStores = this.storeNames.localStorage();
        });

        it("should return the local stores", () => {
            this.localStores.length.should.eql(1);
            this.localStores[0].should.eql("storeD");
        });
    });

    describe("Calling nullStorage", () => {
        beforeEach(() => {
            this.nullStores = this.storeNames.nullStorage();
        });

        it("should return the null stores", () => {
            this.nullStores.length.should.eql(1);
            this.nullStores[0].should.eql("storeE");
        });
    });

    describe("Calling fileStorage", () => {
        beforeEach(() => {
            this.fileStores = this.storeNames.fileStorage();
        });

        it("should return the file stores", () => {
            this.fileStores.length.should.eql(1);
            this.fileStores[0].should.eql("storeF");
        });
    });
});
