import StoreSchema from "../lib/StoreSchema";

describe("StoreSchema", function () {
    describe("when creating a schema", () => {
        describe("with a full definition", () => {
            beforeEach(() => {
                this.schema = new StoreSchema({
                    namespace: "foo",
                    key: "id",
                    foreignKeys: ["parentId"],
                    fields: ["name", "text", "size"]
                });
            });

            it("should have the following interface", () => {
                this.schema.should.have.property("namespace");
                this.schema.should.have.property("key");
                this.schema.should.have.property("foreignKeys");
                this.schema.should.have.property("fields");
                this.schema.should.have.property("allFields");
                this.schema.should.have.property("extensions");
                this.schema.should.respondTo("extend");
                this.schema.should.respondTo("ext");
            });

            it("should report the correct props", () => {
                this.schema.namespace.should.equal("foo");
                this.schema.key.should.equal("id");
                this.schema.foreignKeys.should.eql(["parentId"]);
                this.schema.fields.should.eql(["name", "text", "size"]);
            });

            it("should return all fields", () => {
                this.schema.allFields.should.eql(["id", "parentId", "name", "text", "size"]);
            });

            it("should have no extensions", () => {
                this.schema.extensions.should.be.empty;
            });

            describe("and then extended", () => {
                describe("without a namespace", () => {
                    beforeEach(() => {
                        this.extendSchema = () => this.schema.extend({
                            fields: ["thingy"]
                        });
                    });

                    it("should throw", () => {
                        this.extendSchema.should.throw(Error, "Schema extension missing namespace.");
                    });
                });
                describe("with non duplicated fields/foreignKeys", () => {
                    beforeEach(() => {
                        this.extension = {
                            namespace: "myExtension",
                            fields: ["another", "other"],
                            foreignKeys: ["relatedId"]
                        };
                        this.schema.extend(this.extension);
                    });

                    it("should extend the schema with the new fields", () => {
                        this.schema.fields.should.eql(["name", "text", "size", "another", "other"]);
                    });

                    it("should extend the schema with the new foreignKeys", () => {
                        this.schema.foreignKeys.should.eql(["parentId", "relatedId"]);
                    });

                    it("should be able to return the extension definition", () => {
                        this.schema.ext("myExtension").should.equal(this.extension);
                    });

                    it("should contain the extension in the extensions field", () => {
                        this.schema.extensions.should.contain(this.extension);
                    });
                });

                describe("with dupe fields", () => {
                    beforeEach(() => {
                        this.schema.extend({
                            namespace: "myExtension",
                            fields: ["size", "other"]
                        });
                    });

                    it("should extend the schema with the new fields w/o dupes", () => {
                        this.schema.fields.should.eql(["name", "text", "size", "other"]);
                    });
                });

                describe("with dupe foreignKeys", () => {
                    beforeEach(() => {
                        this.schema.extend({
                            namespace: "myExtension",
                            foreignKeys: ["parentId", "relatedId"]
                        });
                    });

                    it("should extend the schema with the new foreignKeys w/o dupes", () => {
                        this.schema.foreignKeys.should.eql(["parentId", "relatedId"]);
                    });
                });
            });
        });

        describe("with missing key", () => {
            beforeEach(() => {
                this.schema = () => new StoreSchema({
                    namespace: "foo"
                });
            });

            it("should throw", () => {
                this.schema.should.throw(Error, "StoreSchema missing key.");
            });
        });

        describe("with missing namespace", () => {
            beforeEach(() => {
                this.schema = () => new StoreSchema({
                    key: "id"
                });
            });

            it("should throw", () => {
                this.schema.should.throw(Error, "StoreSchema missing namespace.");
            });
        });

        describe("with missing fields and foreign keys", () => {
            beforeEach(() => {
                this.schema = new StoreSchema({
                    namespace: "foo",
                    key: "id"
                });
            });

            it("should have an empty array for fields", () => {
                Array.isArray(this.schema.fields).should.be.true;
                this.schema.fields.should.be.empty;
            });

            it("should have an empty array for foreignKeys", () => {
                Array.isArray(this.schema.foreignKeys).should.be.true;
                this.schema.foreignKeys.should.be.empty;
            });
        });
    });
});
