import _ from "underscore";

export default class StoreSchema {
    constructor(definition) {
        this._preConditions(definition);
        this._dfn = definition;
        this._exts = {}; // Keep a record of all extensions.
    }

    _preConditions(definition) {
        if (!definition.namespace) {
            throw new Error("StoreSchema missing namespace.");
        } else if (!definition.key) {
            throw new Error("StoreSchema missing key.");
        }
    }

    get definition() {
        return this._dfn;
    }

    get namespace() {
        return this._dfn.namespace;
    }

    get key() {
        return this._dfn.key;
    }

    get foreignKeys() {
        return this._dfn.foreignKeys || [];
    }

    get fields() {
        return this._dfn.fields || [];
    }

    get allFields() {
        return [this.key, ...this.foreignKeys].concat(this.fields);
    }

    get extensions() {
        return _.values(this._exts);
    }

    extend(dfn) {
        this._extendPreConditions(dfn);
        this._exts[dfn.namespace] = dfn;
        if (Array.isArray(dfn.foreignKeys)) {
            this._dfn.foreignKeys = _.uniq(this.foreignKeys.concat(dfn.foreignKeys));
        }
        if (Array.isArray(dfn.fields)) {
            this._dfn.fields = _.uniq(this.fields.concat(dfn.fields));
        }
        return this;
    }

    _extendPreConditions(dfn) {
        if (!dfn.namespace) {
            throw new Error("Schema extension missing namespace.");
        }
    }

    ext(namespace) {
        return this._exts[namespace];
    }
}
