import Storeit from "storeit";
import { App } from "spak";
import _ from "underscore";
import StoreNames from "./StoreNames";

const STORAGE_VERSION = 12; // Increment on a breaking change.

export default class StoreRegistry {
    constructor(createPrimaryStorageProvider, createLocalStorageProvider,
        createNullStorageProvider, createFileStorageProvider) {

        this._hasLoaded = false;
        this._storesInfo = this._namespaceIt(App.config.stores);

        this._addInitialStores();
        this._storeNames = new StoreNames(this._storesInfo);

        this.initialize = _.once(this.initialize.bind(this)); // Ensure init only called once.
        this._createStores(createPrimaryStorageProvider, createLocalStorageProvider,
            createNullStorageProvider, createFileStorageProvider);
    }

    initialize() {
        this._loadInitialStores();
        this._setOptionsForStores();
        this._clearAllIfVersionChanged();
    }

    // TODO Throw error if we attempt to load and not authenticated.
    loadAll() {
        if (!this._hasLoaded && App.session().isAuthenticated) { // Only load when authenticated.
            this._hasLoaded = true;
            this._doAll("load", this._storesInfo);
        }
    }

    clearAll() {
        this._clearAll();
        this._hasLoaded = false;
    }

    clearSessionStores() {
        this._clearSessionStores();
        this._hasLoaded = false;
    }

    get userId() {
        return this.data.get("userId");
    }

    get version() {
        return this.schema.get("version", 0);
    }

    // StoreRegistry will always add the `data` and `schema` stores.
    // `schema` will be local so we don't clear the version on signout.
    _addInitialStores() {
        this._storesInfo.unshift({ namespace: "data" });
        this._storesInfo.unshift({ namespace: "schema", isLocalStorage: true });
    }

    _loadInitialStores() {
        ["data", "schema"].forEach((storeInfo) => {
            this[storeInfo].options = { publish: false };
            this[storeInfo].load();
        });
    }

    _doAll(method, storesInfo) {
        storesInfo.forEach((storeInfo) => {
            var store = this[storeInfo.namespace];
            store[method]();
        });
    }

    _updateVersion() {
        this.schema.set("version", STORAGE_VERSION);
    }

    _clearAll() {
        this._doAll("clear", this._storesInfo.slice(0).reverse());
        this.data.clear();
    }

    _clearSessionStores() {
        this._doAll("clear", this._storesInfo.filter(store => !store.isLocalStorage).slice(0).reverse());
        this.data.clear();
    }

    _setOptionsForStores() {
        this._storesInfo.forEach((storeInfo) => {
            var store = this[storeInfo.namespace];
            store.options = storeInfo.options || {};
        });
    }

    _clearAllIfVersionChanged() {
        if (this.version !== STORAGE_VERSION) {
            this.clearAll();
            this._updateVersion();
        }
    }

    // Allow adding store names as strings, and map them here to { namespace: "storename" }.
    _namespaceIt(storesConfig) {
        return storesConfig.map(config => config.namespace ? config : { namespace: config });
    }

    _createStores(createPrimaryStorageProvider, createLocalStorageProvider,
        createNullStorageProvider, createFileStorageProvider) {

        this._createPrimaryStores(createPrimaryStorageProvider);
        this._createLocalStores(createLocalStorageProvider);
        this._createNullStores(createNullStorageProvider);
        this._createFileStores(createFileStorageProvider);

        // Create aliases for the old (deprecated) store names.
        this.contentItem = this.lockerUserContent;
        this.contentMetadata = this.lockerProduct;
        this.product = this.lockerPurchase;
    }

    _createPrimaryStores(createPrimaryStorageProvider) {
        this._storeNames.primaryStorage().forEach(
            this._createStoreWith(createPrimaryStorageProvider())
        );
    }

    _createLocalStores(createLocalStorageProvider) {
        this._storeNames.localStorage().forEach(
            this._createStoreWith(createLocalStorageProvider())
        );
    }

    _createNullStores(createNullStorageProvider) {
        this._storeNames.nullStorage().forEach(
            this._createStoreWith(createNullStorageProvider())
        );
    }

    _createFileStores(createFileStorageProvider) {
        this._storeNames.fileStorage().forEach(
            this._createStoreWith(createFileStorageProvider())
        );
    }

    _createStoreWith(storageProvider) {
        return (namespace) => {
            this[namespace] = new Storeit(namespace, storageProvider);
        };
    }
}
