import _ from "underscore";
import { App } from "spak";
import { copy } from "../utils";
import Storeit from "storeit";

const ACTION_NONE = Storeit.Action.none;
const ACTION_MODIFIED = Storeit.Action.modified;
const CHANGED = "domain.storeValueChanged";

// Create an object using fields from the source object.
var fieldsFrom = (source, data) => _.object(
    Object.keys(source || {}).map(
        key => [key, data[key]]
    )
);

// Create an object from new fields added in the change that are not in the original.
var pullNewFields = (originalData, change) => _.object(
    Object.keys(change).reduce(
        (values, key) => {
            if (!(key in originalData)) {
                values.push([key, change[key]]);
            }
            return values;
        },
        [] // Seed value
    )
);

// If action is modified, make sure data only includes new data.
var dataByAction = (change, details, originalData) => details.action === ACTION_MODIFIED
    ? _.extend(fieldsFrom(details.previousValue, change), pullNewFields(originalData, change))
    : change;

function publishChanged(storeVal, change, details, originalData) {
    App.events.publish(CHANGED, {
        storeVal,
        data: dataByAction(change, details, originalData),
        previous: details.previousValue,
        details
    });
}

export default function domainUpdate(storeVal, change) {
    change = copy(change); // Don't mess with the caller's object.
    var originalData = storeVal.toObject();
    var details = storeVal.set(change);

    if (details.action !== ACTION_NONE) {
        publishChanged(storeVal, change, details, originalData);
    }
    return details;
}
