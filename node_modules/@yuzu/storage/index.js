import Storeit from "storeit";
import { component } from "spak/decorators";
import { SpecRegistration, SpecFromClass, SpecFromFn, SpecFromValue,
         HooksSpec, SpecRef } from "spak-di";
import StoreRegistry from "./lib/StoreRegistry";
import getAllStoreit from "./lib/plugins/getAllStoreit";
import createWebStorageProvider from "./lib/createWebStorageProvider";
import StorageHooks from "./lib/hooks/StorageHooks";
import StoreSchema from "./lib/StoreSchema";
import NullStorage from "storeit-nullstorage";
import ModelData from "./lib/adapters/ModelData";
import domainUpdate from "./lib/adapters/domainUpdate";
import domainRemove from "./lib/adapters/domainRemove";

Storeit.use(getAllStoreit);

@component("@yuzu/storage")
export default class StorageComponent {
    register() {
        return new SpecRegistration(
            new SpecFromValue("localStorage", global.localStorage),
            new SpecFromValue("sessionStorage", global.sessionStorage),
            new SpecFromClass("nullStorage", NullStorage),
            new SpecFromValue("fileStorage", global.localStorage),
            new SpecFromFn(["createLocalStorageProvider", "createUserSettingsProvider"], createWebStorageProvider)
                .setFirstArg(new SpecRef("localStorage")),
            new SpecFromFn("createPrimaryStorageProvider", createWebStorageProvider)
                .setFirstArg(new SpecRef(this.primaryStorageType)),
            new SpecFromFn("createNullStorageProvider", createWebStorageProvider)
                .setFirstArg(new SpecRef("nullStorage")),
            new SpecFromFn("createFileStorageProvider", createWebStorageProvider)
                .setFirstArg(new SpecRef("fileStorage")),
            new SpecFromClass("stores", StoreRegistry),
            new HooksSpec(StorageHooks)
        );
    }

    onAppConfig() {
        // TODO Think about combining these configs.
        this.config.schemas = {};
        this.config.stores = [];
    }

    get primaryStorageType() {
        return this.config.isLocalStorageEnabled ? "localStorage" : "sessionStorage";
    }
}

export { StoreSchema, ModelData, domainUpdate, domainRemove };
